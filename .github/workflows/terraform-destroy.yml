name: Terraform Destroy

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform-destroy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Terraform Init
      run: terraform init

    - name: Check for existing instances
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=github-tests" --query "Reservations[].Instances[?State.Name=='running'].InstanceId" --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Terraform Destroy
      if: env.INSTANCE_ID != ''
      run: |
        terraform destroy -auto-approve
        if [ $? -ne 0 ]; then
          echo "Terraform destroy failed, attempting direct EC2 termination..."
          aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
        fi

    - name: Verify Destruction
      run: |
        REMAINING=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=github-tests" "Name=instance-state-name,Values=running,pending" --query "Reservations[].Instances[].InstanceId" --output text)
        if [ ! -z "$REMAINING" ]; then
          echo "Warning: Instances still exist: $REMAINING"
          exit 1
        fi